/*
 * Copyright 2019 the original authors
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *     http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */

package com.github.hauner.openapi.gradle

import org.gradle.api.DefaultTask
import org.gradle.api.file.FileCollection
import org.gradle.api.tasks.Classpath
import org.gradle.api.tasks.InputDirectory
import org.gradle.api.tasks.Internal
import org.gradle.api.tasks.OutputDirectory
import org.gradle.api.tasks.TaskAction
import org.gradle.workers.IsolationMode
import org.gradle.workers.WorkerConfiguration
import org.gradle.workers.WorkerExecutor

import javax.inject.Inject

/**
 * processor task. Uses a worker executor to run the processor with an isolated "openapiProcessor"
 * configuration classpath.
 *
 * @author Martin Hauner
 */
class OpenApiProcessorTask extends DefaultTask {

    /**
     * Source directory (i.e. parent) of the openapi.yaml input file.
     *
     * Used by gradle for the up-to-date check.
     */
    @InputDirectory
    String apiDir

    /**
     * Target directory for the sources generated by the processor.
     *
     * Used by gradle for the up-to-date check.
     */
    @OutputDirectory
    String targetDir

    /**
     * The dependencies of the processor.
     */
    @Classpath
    FileCollection dependencies

    /**
     * name of the generatr.
     */
    @Internal
    String processorName

    /**
     * properties configured by the processor closure in the OpenApiGeneratrExtension.
     */
    @Internal
    Map<String, ?> processorProps

    @Internal
    final WorkerExecutor workerExecutor

    @Inject
    OpenApiProcessorTask (WorkerExecutor workerExecutor) {
        this.workerExecutor = workerExecutor
    }

    /**
     * runs the configured processor with its own classloader.
     */
    @TaskAction
    void runGeneratr () {
        workerExecutor.submit (OpenApiProcessorWorker) { WorkerConfiguration cfg ->
            cfg.isolationMode = IsolationMode.CLASSLOADER
            cfg.classpath = dependencies.files
            cfg.params processorName, processorProps
        }

    }

}
